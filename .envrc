#!/usr/bin/env bash

set -euo pipefail

PROJECT_ROOT="$(git rev-parse --show-toplevel)"
export PROJECT_ROOT

CLOUDSDK_CORE_PROJECT="gke-cluster-458701"
export CLOUDSDK_CORE_PROJECT

VAULT_ADDR="$(pass vault/dev/address)"
export VAULT_ADDR

VAULT_TOKEN="$(pass vault/dev/token)"
export VAULT_TOKEN

# Detect OS type
OS_TYPE="$(uname -s)"

# Function to install a package using the appropriate package manager
install_package() {
    local pkg="$1"
    if [[ "$OS_TYPE" == "Darwin" ]]; then
        if ! command -v brew &> /dev/null; then
            echo "Homebrew is not installed. Please install Homebrew first."
            exit 1
        fi
        brew install "$pkg"
    elif [[ "$OS_TYPE" == "Linux" ]]; then
        if command -v apt-get &> /dev/null; then
            sudo apt-get update
            sudo apt-get install -y "$pkg"
        elif command -v yum &> /dev/null; then
            sudo yum install -y "$pkg"
        else
            echo "No supported package manager found (apt-get or yum). Please install $pkg manually."
            exit 1
        fi
    else
        echo "Unsupported OS: $OS_TYPE"
        exit 1
    fi
}

# Check if the `gke-gcloud-auth-plugin` command is available in the PATH
if ! command -v gcloud >/dev/null 2>&1; then
    echo "gcloud is not installed. Installing it now..."
    install_package gcloud
else
    echo "gcloud is already installed."
fi

# Check if the `gke-gcloud-auth-plugin` command is available in the PATH
if ! command -v gke-gcloud-auth-plugin >/dev/null 2>&1; then
    echo "gke-gcloud-auth-plugin is not installed. Installing it now..."
    install_package gke-gcloud-auth-plugin
    gcloud auth configure-docker gcr.io --quiet 2>/dev/null
else
    echo "gke-gcloud-auth-plugin is already installed."
fi

# Check if kubectl is installed
if ! command -v kubectl --version &> /dev/null; then
    echo "kubectl is not installed. Installing it now..."
    install_package kubectl
else
    echo "kubectl is already installed."
fi

# Check if jq is installed
if ! command -v jq --version &> /dev/null; then
    echo "jq is not installed. Installing it now..."
    install_package jq
else
    echo "jq is already installed."
fi

# Check if helm is installed
if ! command -v helm --version &> /dev/null; then
    echo "Helm is not installed. Installing it now..."
    install_package helm
else
    echo "Helm is already installed."
fi

# Check if pass is installed
if ! command -v pass --version &> /dev/null; then
    echo "pass is not installed. Installing it now..."
    install_package pass
else
    echo "pass is already installed."
fi