#!/usr/bin/env bash

set -euo pipefail

# Project root
export PROJECT_ROOT="$(git rev-parse --show-toplevel)"

# GCP project
export CLOUDSDK_CORE_PROJECT="gke-cluster-458701"

# Detect OS type
OS_TYPE="$(uname -s)"
APT_UPDATED=0

# ------------------------------------------------------------
# Helpers
# ------------------------------------------------------------

# Run apt-get update only once
apt_update_once() {
    if [[ $APT_UPDATED -eq 0 ]]; then
        sudo apt-get update -y --quiet
        APT_UPDATED=1
    fi
}

# Generic installer
install_package() {
    local pkg="$1"
    if [[ "$OS_TYPE" == "Darwin" ]]; then
        command -v brew >/dev/null 2>&1 || { echo "Please install Homebrew first."; exit 1; }
        brew install "$pkg"
    elif [[ "$OS_TYPE" == "Linux" ]]; then
        if command -v apt-get >/dev/null 2>&1; then
            apt_update_once
            sudo apt-get install -y --quiet "$pkg"
        elif command -v yum >/dev/null 2>&1; then
            sudo yum install -y "$pkg"
        else
            echo "Unsupported Linux package manager. Install $pkg manually."
            exit 1
        fi
    else
        echo "Unsupported OS: $OS_TYPE"
        exit 1
    fi
}

# Install HashiCorp tools using official tap on macOS
install_hashicorp_tool() {
    local tool="$1"
    if ! command -v "$tool" >/dev/null 2>&1; then
        echo "$tool is not installed. Installing..."
        if [[ "$OS_TYPE" == "Darwin" ]]; then
            brew tap hashicorp/tap >/dev/null 2>&1 || true
            brew install "hashicorp/tap/$tool"
        else
            install_package "$tool"
        fi
    else
        echo "$tool is already installed."
    fi
}

# Standard ensure wrapper
ensure_command() {
    local cmd="$1"
    local pkg="${2:-$1}" # default package name = command name
    if ! command -v "$cmd" >/dev/null 2>&1; then
        echo "$cmd is not installed. Installing..."
        install_package "$pkg"
    else
        echo "$cmd is already installed."
    fi
}

# ------------------------------------------------------------
# Special installers
# ------------------------------------------------------------

ensure_gcloud() {
    if ! command -v gcloud >/dev/null 2>&1; then
        echo "Installing Google Cloud CLI..."
        if [[ "$OS_TYPE" == "Linux" ]]; then
            install_package apt-transport-https
            install_package ca-certificates
            install_package gnupg
            install_package curl
            curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | \
                sudo gpg --dearmor -o /usr/share/keyrings/cloud.google.gpg
            echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | \
                sudo tee /etc/apt/sources.list.d/google-cloud-sdk.list
            apt_update_once
            sudo apt-get install -y --quiet google-cloud-cli
        else
            install_package gcloud
        fi
    else
        echo "gcloud is already installed."
    fi
}

ensure_gke_plugin() {
    if ! command -v gke-gcloud-auth-plugin >/dev/null 2>&1; then
        echo "Installing gke-gcloud-auth-plugin..."
        [[ "$OS_TYPE" == "Linux" ]] && install_package google-cloud-sdk-gke-gcloud-auth-plugin
    else
        echo "gke-gcloud-auth-plugin already installed."
    fi
}

# ------------------------------------------------------------
# Tool installs
# ------------------------------------------------------------

ensure_gcloud
ensure_gke_plugin
install_hashicorp_tool terraform
install_hashicorp_tool vault
ensure_command make
ensure_command kubectl
ensure_command jq
ensure_command docker docker.io docker-buildx
ensure_command helm
ensure_command pass

# ------------------------------------------------------------
# Vault environment
# ------------------------------------------------------------

export VAULT_ADDR="$(pass vault/dev/address)"
export VAULT_TOKEN="$(pass vault/dev/token)"
